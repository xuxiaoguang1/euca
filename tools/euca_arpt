#!/usr/bin/perl
#Copyright (c) 2009  Eucalyptus Systems, Inc.	
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by 
#the Free Software Foundation, only version 3 of the License.  
# 
#This file is distributed in the hope that it will be useful, but WITHOUT
#ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#for more details.  
#
#You should have received a copy of the GNU General Public License along
#with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
#Please contact Eucalyptus Systems, Inc., 130 Castilian
#Dr., Goleta, CA 93101 USA or visit <http://www.eucalyptus.com/licenses/> 
#if you need additional information or have any questions.
#
#This file may incorporate work covered under the following copyright and
#permission notice:
#
#  Software License Agreement (BSD License)
#
#  Copyright (c) 2008, Regents of the University of California
#  
#
#  Redistribution and use of this software in source and binary forms, with
#  or without modification, are permitted provided that the following
#  conditions are met:
#
#    Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#    Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
#  OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. USERS OF
#  THIS SOFTWARE ACKNOWLEDGE THE POSSIBLE PRESENCE OF OTHER OPEN SOURCE
#  LICENSED MATERIAL, COPYRIGHTED MATERIAL OR PATENTED MATERIAL IN THIS
#  SOFTWARE, AND IF ANY SUCH MATERIAL IS DISCOVERED THE PARTY DISCOVERING
#  IT MAY INFORM DR. RICH WOLSKI AT THE UNIVERSITY OF CALIFORNIA, SANTA
#  BARBARA WHO WILL THEN ASCERTAIN THE MOST APPROPRIATE REMEDY, WHICH IN
#  THE REGENTS' DISCRETION MAY INCLUDE, WITHOUT LIMITATION, REPLACEMENT
#  OF THE CODE SO IDENTIFIED, LICENSING OF THE CODE SO IDENTIFIED, OR
#  WITHDRAWAL OF THE CODE CAPABILITY TO THE EXTENT NEEDED TO COMPLY WITH
#  ANY SUCH LICENSES OR RIGHTS.
#

use Digest::MD5 qw(md5 md5_hex md5_base64);
use MIME::Base64;

delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};
$ENV{'PATH'}='/bin:/usr/bin:/sbin:/usr/sbin/';

if (@ARGV == 1) {
    print STDERR "DO NEW EUCA_ARPT\n";
    doexit(new_euca_arpt(@ARGV), "done\n");
} else {
    dodie("euca_arpt: wrong number of commandline parameters\n");
}

sub new_euca_arpt() {
    my %nets, %ips;
    $rulefile = shift @_;
    if ($rulefile =~ /^([ &:#-\@\w.]+)$/) {
	$rulefile = $1; #data is now untainted
    } else {
	return(1);
    }    
    
    if (!$rulefile || $rulefile eq "" || !-f $rulefile) {dodie("cannot verify commandline options");}

    my $rc = system("arptables -L INPUT >/dev/null 2>&1");
    my $chain;
    if ($rc) {
	$chain = "IN";
    } else {
	$chain = "INPUT";
    }
    my $ofile = "/tmp/euca-arpt-intermediate.$$";

    my $count = 0;
    my $doit = 0;
    open(FH, "$rulefile");
    while(<FH>) {
	chomp;
	my $line = $_;
	if ($line =~ /IP=(\d+\.\d+\.\d+\.\d+),(\d+\.\d+\.\d+\.\d+)/) {
	    my $ip = $1;
	    my $gw = $2;
	    print STDERR "EUCA_ARPT: IP FROM FILE: $ip,$gw\n";
	    $ips{$ip} = $gw;
#	    print OFH "-A $chain -s $ip -d $gw -j ACCEPT\n";
	    $count++;
	} elsif ($line =~ /NET=(\d+\.\d+\.\d+\.\d+\/\d+),(\d+\.\d+\.\d+\.\d+)/) {
	    my $net = $1;
	    my $gw = $2;
	    print STDERR "EUCA_ARPT: NET FROM FILE: $net\n";
	    $nets{$net} = $gw;
#	    print OFH "-A $chain -s $net -d $gw -j DROP\n";
	    $doit = 1;
	    $count++;
	} 
    }
    close(FH);

    open(OFH, ">$ofile");
    print OFH "*filter\n";
    if ($chain eq "IN") {
	print OFH ":IN ACCEPT [0:0]\n";
	print OFH ":OUT ACCEPT [0:0]\n";
	print OFH ":FORWARD ACCEPT [0:0]\n";
    } else {
	print OFH ":INPUT ACCEPT\n";
	print OFH ":OUTPUT ACCEPT\n";
	print OFH ":FORWARD ACCEPT\n";
    }
    foreach $ip (keys(%ips)) {
	my $gw = $ips{$ip};
	print OFH "-A $chain -s $ip -d $gw -j ACCEPT\n";
    }
    foreach $net (keys(%nets)) {
	my $gw = $nets{$net};
	print OFH "-A $chain -s $net -d $gw -j DROP\n";
    }
    if ($chain eq "IN") {
	print OFH "COMMIT\n";
    }

    close(OFH);

    $rc = 0;
    if ($doit && $count) {
	print STDERR "UPDATING ARP TABLES\n";
	$rc = system("cat $ofile | arptables-restore");
	print STDERR "UPDATING ARP TABLES DONE: $rc\n";
    } elsif (!$count) {
	print STDERR "FLUSHING ARP TABLES\n";
	$rc = system("arptables -F");
	print STDERR "FLUSHING ARP TABLES DONE: $rc\n";
    }
    
    unlink("$ofile");
    return($rc);
}

sub doexit {
    $ret = shift @_;
    $msg = shift @_;
    if ($msg) {
	print STDERR "$msg\n";
    }

    for ($i=0; $i<@workingfiles; $i++) {
	if ( -f "$workingfiles[$i]" ) {
	    unlink("$workingfiles[$i]");
	}
    }

    exit($ret);
}    

sub dodie {
    $msg = shift @_;
    doexit(1, "[EUCAERROR] $msg");
}

